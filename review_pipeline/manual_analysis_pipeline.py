import json
import csv
import shutil
from git import Repo
from pydriller import Repository
import os
import string
import webbrowser


OUTPUT_FILENAME = "manual_evalueted_dataset.json"


class CveToCwe():
    def __init__(self, cve, cwe, cwe_desc, status_code):
        self.cve = cve
        self.cwe = cwe
        self.cwe_desc = cwe_desc
        self.status_code = status_code


class Statement():
    def __init__(self, id, cwe, repo, fixing, introducing="", vuln_files=[]):
        self.id = id
        self.cwe = cwe
        self.repo = repo
        self.fixing_commits = fixing
        self.introducing = introducing
        self.vuln_files = vuln_files

    def clean_repo_url(self):
        url = self.repo.replace(".git", "")
        url = url.replace(
            "https://git-wip-us.apache.org/repos/asf/", "https://github.com/apache/")
        url = url.replace("https://gitbox.apache.org/repos/asf/",
                          "https://github.com/apache/")
        if not url.endswith("/"):
            url += "/"
        return url


def find_cwe_desc(needle, stack):
    for s in stack:
        if s.cve == needle:
            return (s.cwe, s.cwe_desc)
    return None


def load_cwe_mapping():
    data = []
    with open("cve_to_cwe.csv") as infile:
        reader = csv.reader(infile, quoting=csv.QUOTE_MINIMAL)
        first = True
        for row in reader:
            if first:
                first = False
                continue
            data.append(CveToCwe(*row))
    return data


def openCommit(s, commit):
    baseurl = "{}commit/".format(s.clean_repo_url())
    webbrowser.open(baseurl + commit)


def save(data):
    with open("analysis_file2.json", "w", newline='') as outfile:
        json.dump(data, outfile)


def parse_lines(line: str):
    lines = []
    items = line.split(";")
    for item in items:
        if "-" in item:
            ran = item.split("-")
            start = int(ran[0])
            fin = int(ran[1])
            for i in range(start, fin+1):
                lines.append(i)
        else:
            lines.append(int(item))
    return lines


def in_ignorewhitespace(needle: str, stack: str):
    ignore = string.whitespace
    mapping = {ord(c): None for c in ignore}
    needle = needle.translate(mapping)
    stack = stack.translate(mapping)
    return needle in stack


def main(input_dataset, cve_to_cwe, output_file_name):
    for sample in input_dataset:
        if sample.introducing == "not found":
            cwe = find_cwe_desc(sample.id, cve_to_cwe)
            sample.cwe = cwe[0]
            print(cwe)
            for fixing in sample.fixing_commits:
                openCommit(sample, fixing)
            print("Intro commit:")
            intro_commit = input()
            sample.introducing = intro_commit
            save(cve_data)
            continue
        if sample.introducing != "":
            continue
        cwe = find_cwe_desc(sample.id, cve_to_cwe)
        sample.cwe = cwe[0]
        print(cwe)
        for fixing in sample.fixing_commits:
            openCommit(sample, fixing)

        shutil.rmtree("clone", ignore_errors=True)
        os.makedirs("clone", exist_ok=True)
        repo = Repo.clone_from(sample.repo, "clone")
        user_in = ""
        vuln_files = []
        while user_in != "-":
            print("Blame files: - to continue")
            user_in = input()
            if user_in == "-":
                break
            print("Blame lines: ; for multiple, - for range")
            lines_str = input()
            lines = parse_lines(lines_str)
            print("searchstring?")
            searchstring = input()
            vuln_files.append((user_in, lines, searchstring))

        for vuln_file in vuln_files:
            search_string = vuln_file[2]
            candidates = []
            search_file = vuln_file[0]
            # search for commits that changed the vuln file
            driller_repo = Repository(
                "clone", filepath=search_file, to_commit=sample.fixing_commits[0])
            all_commits = list(driller_repo.traverse_commits())
            all_commits_len = len(all_commits)
            for i, commit in enumerate(all_commits):
                print("checking commits: {:4.2f}%".format(
                    i/all_commits_len * 100))
                search_filename = search_file.split("/")[-1]
                renamed_filenames = [search_filename]
                for mFile in commit.modified_files:
                    if mFile.filename != search_filename:
                        continue
                    is_candidate = False
                    before = mFile.content_before.decode(
                        "utf-8") if mFile.content_before is not None else None
                    after = mFile.content.decode(
                        "utf-8") if mFile.content is not None else None
                    if after is not None:
                        if in_ignorewhitespace(search_string, after):
                            is_candidate = True
                        if is_candidate:
                            if before is not None:
                                if in_ignorewhitespace(search_string, before):
                                    is_candidate = False
                        if is_candidate:
                            candidates.append(commit)

            found = False
            candidates.reverse()  # reverse the order to go back in time
            print("Found {} candidates".format(len(candidates)))
            for commit in candidates:
                blame_commit = commit.hash
                openCommit(sample, blame_commit)
                print("Introducing?")
                isIntro = input()
                if isIntro == "y":
                    sample.introducing = blame_commit
                    sample.vuln_files = vuln_files
                    found = True
                    break
                if isIntro == "skip":
                    sample.introducing = "skip"
                    break
            if not found:
                sample.introducing = "not found"
            save(cve_data)


if __name__ == '__main__':
    main()
